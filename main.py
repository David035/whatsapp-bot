import os
from flask import Flask, request
import vonage
import pkg_resources # Necesario para obtener la versi√≥n de la librer√≠a

# -----------------------------------------------------------------------------
# Inicializaci√≥n de la Aplicaci√≥n Flask
# -----------------------------------------------------------------------------
main = Flask(__name__)

# üîê Variables de entorno
# Estas variables se cargan desde el entorno de Render o Google Cloud Run
VONAGE_API_KEY = os.environ.get("VONAGE_API_KEY")
VONAGE_API_SECRET = os.environ.get("VONAGE_API_SECRET")
# VONAGE_BRAND_NAME es el n√∫mero de WhatsApp Business API (sin el '+')
VONAGE_BRAND_NAME = os.environ.get("VONAGE_BRAND_NAME")

# -----------------------------------------------------------------------------
# Verificaci√≥n de la Librer√≠a Vonage (para depuraci√≥n)
# -----------------------------------------------------------------------------
try:
    print("üîç vonage se carga desde:", vonage.__file__)
    vonage_version = pkg_resources.get_distribution("vonage").version
    print(f"üì¶ Versi√≥n de la librer√≠a 'vonage' instalada y cargada: {vonage_version}")
except Exception as e:
    print(f"‚ùå Error al obtener la info de la librer√≠a 'vonage': {e}")

# -----------------------------------------------------------------------------
# Inicializaci√≥n del Cliente Vonage
# -----------------------------------------------------------------------------
try:
    # --- L√çNEA DE DEPURACI√ìN A√ëADIDA ---
    # Esto imprimir√° todos los atributos disponibles en el m√≥dulo 'vonage'
    print(f"üëÄ Atributos disponibles en el m√≥dulo 'vonage' antes de inicializar cliente: {dir(vonage)}")
    # --- FIN L√çNEA DE DEPURACI√ìN ---

    # Esta l√≠nea es correcta para la versi√≥n moderna del SDK de Vonage (3.x.x o superior)
    # Se inicializa el cliente con la API Key y Secret
    client = vonage.Client(key=VONAGE_API_KEY, secret=VONAGE_API_SECRET)
    print("‚úÖ Cliente de Vonage inicializado.")
except Exception as e:
    print(f"‚ùå Error inicializando Vonage: {e}. "
          f"Aseg√∫rate de que VONAGE_API_KEY y VONAGE_API_SECRET est√©n configuradas correctamente en tus variables de entorno.")

# -----------------------------------------------------------------------------
# Webhook de Mensajes Entrantes
# Esta ruta recibe los mensajes de WhatsApp que Vonage env√≠a a tu bot
# -----------------------------------------------------------------------------
@main.route("/webhook/inbound", methods=["POST"])
def inbound():
    data = request.json
    print("üì• Mensaje recibido:", data)

    sender = data.get("from") # N√∫mero del remitente del mensaje
    # Acceso robusto al texto del mensaje para webhooks de WhatsApp
    # El texto suele venir anidado en 'message' -> 'content' -> 'text'
    message_body = data.get("message", {}).get("content", {}).get("text")

    if sender and message_body and VONAGE_BRAND_NAME:
        # üß† L√≥gica b√°sica del bot para responder a mensajes
        text = message_body.lower()
        if "hola" in text:
            response = "¬°Hola! Soy tu bot ü§ñ. ¬øEn qu√© puedo ayudarte?"
        elif "ayuda" in text:
            response = "Claro, puedo ayudarte con preguntas como 'horarios', 'contacto', etc."
        else:
            response = "No entend√≠ bien. Escribe 'ayuda' para ver opciones."

        try:
            # ‚úÖ CAMBIO CLAVE: Llamada para enviar el mensaje usando client.messages
            # El mensaje se env√≠a de vuelta al remitente a trav√©s del canal de WhatsApp
            client.messages.send_message({
                "channel": "whatsapp",
                "to": sender,
                "from": VONAGE_BRAND_NAME, # Tu n√∫mero de WhatsApp Business API
                "message_type": "text",
                "text": response # El contenido de la respuesta
            })
            print("üì§ Mensaje enviado correctamente.")
        except Exception as e:
            print(f"‚ùå Error al enviar el mensaje de WhatsApp: {e}")
            # Puedes a√±adir aqu√≠ una l√≥gica para registrar este error o notificar
    else:
        print("‚ö†Ô∏è Faltan datos necesarios (sender, message_body o VONAGE_BRAND_NAME). No se pudo procesar el mensaje entrante.")

    return "OK", 200 # Siempre devuelve un 200 OK para que Vonage no reintente

# -----------------------------------------------------------------------------
# Webhook para el Estado de los Mensajes
# Esta ruta recibe actualizaciones sobre el estado de los mensajes enviados
# (por ejemplo, entregado, le√≠do, fallido)
# -----------------------------------------------------------------------------
@main.route("/webhook/status", methods=["POST"])
def status():
    data = request.json
    print("üìà Estado del mensaje:", data)
    # Aqu√≠ puedes a√±adir l√≥gica para registrar el estado de los mensajes
    return "OK", 200

# -----------------------------------------------------------------------------
# Ruta Principal del Servidor Web
# Esta ruta es para verificar que la aplicaci√≥n est√° en ejecuci√≥n al visitar la URL principal
# -----------------------------------------------------------------------------
@main.route("/")
def home():
    return "Bot de WhatsApp con Vonage activo y esperando webhooks.", 200

# -----------------------------------------------------------------------------
# Inicio de la Aplicaci√≥n Flask
# Se ejecuta solo si el script se corre directamente (no cuando se importa)
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    # Cloud Run (y Render) inyectan la variable de entorno 'PORT'
    # La aplicaci√≥n debe escuchar en este puerto
    port = int(os.environ.get("PORT", 5000))
    main.run(host="0.0.0.0", port=port)